service: webistics-server

custom:
    # tableName: 'analytics-table-${self:provider.stage}'
    tableName: ${env:DYNAMODB_TABLE}
    userTable: ${env:USER_TABLE}
    myDomain: ${env:MY_DOMAIN}
    region: ${env:REGION}
    jwtSecret: ${env:JWT_SECRET}
    isOffline: false
    dynamodb:
        stages:
            - dev
        region: ${env:REGION}
        start:
            migrate: true
            seed: true
        seed:
            domain:
                sources:
                    - table: ${env:USER_TABLE}
                      sources: [./dynamodbLocal/seedUser.json]
                    - table: ${env:DYNAMODB_TABLE}
                      sources: [./dynamodbLocal/seedAnalytics.json]

provider:
    name: aws
    runtime: nodejs12.x
    stage: dev
    memorySize: 512
    region: ${self:custom.region}
    environment:
        DYNAMODB_TABLE: ${self:custom.tableName}
        USER_TABLE: ${self:custom.userTable}
        MY_DOMAIN: ${self:custom.myDomain}
        IS_OFFLINE: ${self:custom.isOffline}
        JWT_SECRET: ${self:custom.jwtSecret}
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"

functions:
    analyticsFunc:
        handler: dist/index.handler
        events:
            - http:
                path: /analytics
                method: post
                cors:
                    # origin: ${self:custom.myDomain}
                    origin: '*'
            - http:
                path: /analytics
                method: get
                cors:
                    origin: '*'
                    # origin: ${self:custom.myDomain}
            - http:
                path: /login
                method: post
                cors:
                    origin: '*'

resources:
    Resources:
        AnalyticsDynamoDbTable:
            Type: 'AWS::DynamoDB::Table'
            DeletionPolicy: Retain
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:provider.environment.DYNAMODB_TABLE}
        usersTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                # TableName: usersTable
                TableName: ${self:provider.environment.USER_TABLE}
                AttributeDefinitions:
                    - AttributeName: username
                      AttributeType: S
                KeySchema:
                    - AttributeName: username
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1

# package:
#     exclude:
#         - node_modules/**

plugins:
    - serverless-offline
    - serverless-dynamodb-local
    - serverless-dotenv-plugin

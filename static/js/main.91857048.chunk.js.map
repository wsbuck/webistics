{"version":3,"sources":["redux/reducers/index.ts","constants/index.ts","redux/types/index.ts","redux/store/index.ts","components/PrivateRoute.tsx","components/Loader.tsx","components/LoginForm.tsx","redux/actions/index.ts","pages/Login.tsx","pages/Feed.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["token","localStorage","getItem","initialAuthState","isLoggedIn","initialFeedState","endpoint","process","rootReducer","combineReducers","auth","state","action","type","Object","assign","payload","feed","middlewares","thunkMiddleware","PrivateRoute","children","rest","render","location","to","pathname","from","Loader","className","style","width","height","withRouter","history","useSelector","dispatch","useDispatch","useState","username","setUsername","password","setPassword","loading","setLoading","error","setError","clsx","onSubmit","event","preventDefault","data","fetch","method","headers","body","JSON","stringify","then","resp","status","json","Error","setItem","setToken","undefined","push","catch","err","console","id","name","placeholder","value","onChange","e","target","Login","Feed","views","setViews","useEffect","log","Authorization","length","setTimeout","map","view","key","ipAddress","org","city","longitude","latitude","Date","date","toDateString","App","exact","path","Boolean","window","hostname","match","preloadedState","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91857048.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport {\n  AuthState,\n  FeedState,\n  LOGIN,\n  LOGOUT,\n  SET_TOKEN,\n  AuthActionTypes\n} from '../types';\n\nimport { AUTH_TOKEN_NAME } from '../../constants';\n\nconst token = localStorage.getItem(AUTH_TOKEN_NAME) || 'none';\n\nconst initialAuthState: AuthState = {\n  isLoggedIn: token !== 'none' ? true : false,\n  token: token,\n};\n\nconst prodEndpoint = process.env.REACT_APP_ANALYTICS_ENDPOINT || 'none';\n\nconst endpoint = (process.env.NODE_ENV === 'development'\n  ? 'http://localhost:8080'\n  : prodEndpoint\n);\n\nconst initialFeedState: FeedState = {\n  endpoint: endpoint\n};\n\nconst auth = (\n  state=initialAuthState,\n  action: AuthActionTypes,\n) => {\n  switch (action.type) {\n    case LOGIN:\n      return Object.assign({}, state, {\n        isLoggedIn: true,\n      });\n    case LOGOUT:\n      return Object.assign({}, state, {\n        isLoggedIn: false,\n      });\n    case SET_TOKEN:\n      return Object.assign({}, state, {\n        token: action.payload,\n      });\n    default:\n      return state;\n  }\n}\n\nconst feed = (\n  state=initialFeedState,\n  action: any\n) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  auth,\n  feed,\n});\n\nexport default rootReducer;\n","export const AUTH_TOKEN_NAME: string = 'webisticsJWT';\n","import rootReducer from '../reducers';\n\nexport const LOGIN: string = 'LOGIN';\nexport const LOGOUT: string = 'LOGOUT';\nexport const SET_TOKEN: string = 'SET_TOKEN';\n\nexport interface AuthState {\n  isLoggedIn: boolean;\n  token: string;\n};\n\nexport interface FeedState {\n  endpoint: string;\n};\n\ninterface LoginAction {\n  type: typeof LOGIN\n  payload: void,\n};\n\ninterface LogoutAction {\n  type: typeof LOGOUT,\n  payload: void,\n};\n\ninterface SetTokenAction {\n  type: typeof SET_TOKEN,\n  payload: string;\n};\n\nexport type AuthActionTypes = LoginAction | LogoutAction | SetTokenAction;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst middlewares = [thunkMiddleware];\nif (process.env.NODE_ENV === 'development') {\n  const { logger } = require('redux-logger');\n  middlewares.push(logger);\n}\n\nexport default function configureStore(preloadedState: any) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(...middlewares),\n  );\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport default function PrivateRoute({ children, isLoggedIn, ...rest }: any) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => (\n        isLoggedIn\n        ? children\n        : (\n          <Redirect\n            to={{ pathname: '/login', state: { from: location }}}\n          />\n        )\n      )}\n    />\n  );\n}\n","import React from 'react';\n\nconst Loader = () => (\n  <div className='loader-container'>\n    <div className='loader' style={{width: 30, height: 30}}>\n      <div className='loader' style={{width: 20, height: 20}}>\n        <div className='loader' style={{width: 10, height: 10}} />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Loader;\n","import React, { useState, FormEvent } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport clsx from 'clsx';\n\nimport { AUTH_TOKEN_NAME } from '../constants';\nimport Loader from './Loader';\n\nimport { login, setToken } from '../redux/actions';\nimport { RootState } from '../redux/types';\n\nfunction LoginForm({ history }: RouteComponentProps) {\n  const endpoint = useSelector((state: RootState) => state.feed.endpoint);\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  function handleLogin(event: FormEvent) {\n    event.preventDefault();\n    setLoading(true);\n    const data = {\n      username,\n      password\n    };\n    fetch(endpoint + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    }).then((resp) => {\n      if (resp.status === 200) {\n        return resp.json();\n      } else {\n        throw new Error('Error authenticating user');\n      }\n    }).then((data) => {\n      saveToken(data.token)\n    }).then(() => {\n      // setTimeout(() => setLoading(false), 1000);\n      setLoading(false);\n      dispatch(login());\n      history.push('/');\n    }).catch(err => {\n      setLoading(false);\n      setError(true);\n      setUsername('');\n      setPassword('');\n      console.error(err);\n    });\n  }\n\n  function saveToken(token: string) {\n    localStorage.setItem(AUTH_TOKEN_NAME, token);\n    dispatch(setToken(token));\n  }\n\n  return (\n    <form className={clsx('loginForm', error && 'error')} onSubmit={handleLogin}>\n      <input\n        type='text'\n        id='username'\n        name='username'\n        placeholder='Username'\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <input\n        type='password'\n        id='password'\n        name='password'\n        placeholder='Password'\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type='submit'>Submit</button>\n      { loading && (<Loader />) }\n    </form>\n  );\n}\n\nexport default withRouter(LoginForm);\n","import { LOGIN, LOGOUT, SET_TOKEN, AuthActionTypes } from '../types';\n\nexport function login(): AuthActionTypes {\n  return {\n    type: LOGIN,\n    payload: undefined,\n  };\n}\n\nexport function logout(): AuthActionTypes {\n  return {\n    type: LOGOUT,\n    payload: undefined,\n  };\n}\n\nexport function setToken(token: string): AuthActionTypes {\n  return {\n    type: SET_TOKEN,\n    payload: token,\n  }\n}\n","import React from 'react';\n\nimport LoginForm from '../components/LoginForm';\n\nfunction Login() {\n\n  return (\n    <div className='loginPage'>\n      <LoginForm />\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Loader from '../components/Loader';\n\nimport { RootState } from '../redux/types';\n\ninterface IView {\n  city: string;\n  org: string;\n  ipAddress: string;\n  countryCode: string;\n  longitude: number;\n  latitude: number;\n  postal: string;\n  id: string;\n  date: number;\n}\n\nfunction Feed() {\n  const endpoint = useSelector((state: RootState) => state.feed.endpoint);\n  const token = useSelector((state: RootState) => state.auth.token);\n  const [views, setViews] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // const endpoint: string = process.env.REACT_APP_ANALYTICS_ENDPOINT || 'none';\n    console.log(endpoint);\n    setLoading(true);\n    fetch(endpoint + '/analytics', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.length > 0) {\n          setViews(data);\n          // setLoading(false);\n        }\n      })\n      .then(() => {\n        setTimeout(() => setLoading(false), 2000);\n        // setLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setLoading(false);\n      });\n  }, [endpoint, token]);\n\n  return (\n    <div className='feed'>\n      {loading && (\n        <Loader />\n      )}\n      {views && !loading &&\n        views.map((view: IView) => (\n          <div className='view' key={view.id}>\n            <p>{view.ipAddress}</p>\n            <p>{view.org}</p>\n            <p>{view.city}</p>\n            <p>{view.longitude}</p>\n            <p>{view.latitude}</p>\n            <p>{new Date(view.date).toDateString()}</p>\n          </div>\n        ))}\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport LoginButton from './LoginButton';\nimport PrivateRoute from './PrivateRoute';\nimport Login from '../pages/Login';\nimport Feed from '../pages/Feed';\nimport { RootState } from '../redux/types';\nimport '../assets/App.scss';\n  \n\nfunction App() {\n  const isLoggedIn = useSelector((state: RootState) => state.auth.isLoggedIn);\n\n  return (\n    <div className='App'>\n      {/* <LoginButton /> */}\n      <Switch>\n        <PrivateRoute exact path='/' isLoggedIn={isLoggedIn}>\n          <Feed />\n        </PrivateRoute>\n        <Route exact path='/login'>\n          <Login />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport configureStore from './redux/store';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = configureStore({});\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}